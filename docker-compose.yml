services:
  hardhat-node:
    build:
      context: .
      dockerfile: ./hardhat-node/Dockerfile
    container_name: democracy-hardhat-node
    ports:
      - "8545:8545"
    environment:
      - NODE_ENV=production
    user: "clistenes"
    networks:
      - democracy
    deploy:
      resources:
        limits:
          memory: 512M

  deployer-interactor:
    build:
      context: ./dapp
    container_name: democracy-deployer-interactor
    ports:
      - "3000:3000"
    stdin_open: true
    tty: true
    environment:
      - NODE_ENV=production
      - HARDHAT_URL=http://hardhat-node:8545
    user: "clistenes"
    depends_on:
      - hardhat-node
    networks:
      - democracy
    volumes: # Eliminar cuando haya terminado de desarrollar
      - ./dapp:/app
    deploy:
      resources:
        limits:
          memory: 512M

  frontend:
    build:
      context: ./frontend
    container_name: democracy-frontend
    ports:
      - "80:5173"
    environment:
      - NODE_ENV=development # production
      - VITE_HARDHAT_URL=http://hardhat-node:8545
      - VITE_BACKEND_URL=http://localhost:8000/api/v1
      - VITE_CONTRACT_API_URL=http://localhost:3000
    user: "clistenes"
    depends_on:
      - hardhat-node
      - deployer-interactor
      - qdrant
      - worker
      - backend
      - rabbitmq
    networks:
      - democracy
    volumes: # Eliminar cuando haya terminado de desarrollar
      - ./frontend:/app
      - /app/node_modules

  qdrant:
    image: qdrant/qdrant:latest
    container_name: democracy-qdrant
    restart: unless-stopped
    networks:
      - ragnet
    volumes:
      - qdrant_data:/qdrant/storage
  
  rabbitmq:
    build:
      context: ./rabbitmq
      args:
        RABBITMQ_USER: ${RABBITMQ_USER:-rabbituser}
        RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-securepassword123}
    container_name: democracy-rabbitmq
    restart: unless-stopped
    environment:
      - RABBITMQ_LOAD_DEFINITIONS=/etc/rabbitmq/definitions.json
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ragnet

  mysql:
    image: mysql:9.3
    container_name: democracy-mysql
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=rootpass
      - MYSQL_DATABASE=${MYSQL_DATABASE:-democracy}
      - MYSQL_USER=${MYSQL_USER:-user}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-password}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - ragnet

  backend:
    build:
      context: ./backend
    container_name: democracy-backend
    user: "clistenes"
    volumes:
      - ./backend:/app # Eliminar cuando haya terminado de desarrollar
      - ./data:/data
    environment:
      - MYSQL_URL=${MYSQL_URL:-mysql+asyncmy://user:password@mysql:3306/democracy}
      - RABBITMQ_URL=${RABBITMQ_URL:-amqp://guest:guest@rabbitmq:5672/democracy}
      - RABBITMQ_QUEUE=democracy
      - UPLOAD_DIR=/data/uploads
      - FRONTEND_HOST=${FRONTEND_HOST:-http://localhost}
    ports:
      - "8000:8000"
    depends_on:
      - rabbitmq
      - qdrant
      - mysql
    networks:
      - ragnet

  worker:
    build: ./worker
    container_name: democracy-worker
    volumes:
      - ./data:/data
    depends_on:
      rabbitmq:
        condition: service_healthy
      qdrant:
        condition: service_started
    environment:
      - RABBITMQ_URL=${RABBITMQ_URL:-amqp://guest:guest@rabbitmq:5672/democracy}
      - RABBITMQ_QUEUE=${RABBITMQ_QUEUE:-democracy}
      - QDRANT_URL=${QDRANT_HOST:-http://qdrant:6333/}
      - EMBEDDING_MODEL=all-MiniLM-L6-v2
      - UPLOAD_DIR=/data/uploads
      - NVIDIA_VISIBLE_DEVICES=all
      - PYTHONUNBUFFERED=1
    networks:
      - ragnet
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [gpu]
    runtime: nvidia


volumes:
  qdrant_data:
  mysql_data:

networks:
  democracy:
    driver: bridge
  ragnet:
    driver: bridge

